# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Giovanni Mineo"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- "14"
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name,"is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
print(name_length)
fav_1 <- "44"
fav_2 <- "7"
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
fav_1 <- fav_1/sqrt(201)
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
fav_1 <- 44/sqrt(201)
fav_2 <- 7/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round(fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
max(round_sum, sum_round)
max(round_sum, sum_round)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruts_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
fruits_e <- gsub("a", "ee", fruits)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric-e <- paste(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value + 3)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value) {value + 3}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
meters <- total.inches * 0.0254 meters}
meters <- total.inches*0.0254 meters}
imperial_to_metric <- function(feet, inches) {
total.inches <- feet*12 + inches
meters <- total.inches * 0.0254
meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,7)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,7)
diff >= min_length
is_twice_as_long <- function(str1, str2)
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(str1, str2) {
diff <- abs(nchar(str1) - nchar(str2))
min_length <- min(nchar(str1), nchar(str2));
diff >= min_length
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("dog", "elephant")
is_twice_as_long("elephant", "dog")
is_twice_as_long("dog", "cat")
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
describe_difference <- function(first,second) {
diff <- nchar(first) - nchar(second)
if(diff > 0) {
sentence <- paste("Your first string is longer by", diff, "characters")
} else if(diff < 0) {
sentence <- paste("Your second string is longer by", -diff, "characters")
} else {
sentence <- "Your strings are the same length!"
}
sentence
sentence <- "Your strings are the same length!"
}
sentence
sentence <- "Your strings are the same length!"
}
sentence
